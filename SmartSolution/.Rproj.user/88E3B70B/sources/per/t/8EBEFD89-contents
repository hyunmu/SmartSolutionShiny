

ModalCommonPlot <- function(failed = FALSE) {
  labelStr <- "플롯 옵션"
  modalDialog(
    title=labelStr,
    actionButton("MCP_y", label="Y 변수 선정"),
    actionButton("MCP_x", label="x 변수 선정"),
    actionButton("MCP_color", label="color 변수 선정"),
    actionButton("MCP_size", label="size 변수 선정"),
    actionButton("MCP_shape", label="shape 변수 선정"),
    actionButton("MCP_tooltip", label="tooltip 변수 선정"),
    actionButton("MCP_data_id", label="data_id 변수 선정"),
    actionButton("MCP_fitOption", label="Fitting 함수 선정"),
    tags$p(""),
    tags$hr(),
    tags$p(paste0(" Y : ", str_c(aesList[["y"]], collapse=", "))),
    tags$p(paste0(" X : ", str_c(aesList[["x"]], collapse=", "))),
    tags$p(paste0(" color : ", aesList[["color"]])),
    tags$p(paste0(" size  : ", aesList[["size"]])),
    tags$p(paste0(" shape : ", aesList[["shape"]])),
    tags$p(paste0(" tooltip  : ", aesList[["tooltip"]])),
    tags$p(paste0(" data_id : ", aesList[["data_id"]])),
    tags$p(paste0(" fitOption : ", aesList[["fitOption"]])),

    if (failed)
      div(tags$b("Invalid data", style = "color: red;")),
    
    
    footer = tagList(
      modalButton("Cancel"),
      actionButton("okModalCommonPlot", "OK")
    ),
    size="l"
  )
  

}

treatModalCommonPlot <- function(input, output, session) {


  observeEvent(input$MCP_y, {
    numVar <- rownames(orderVFcluster(dfReportCommon))
    curAes <<- "y"
    if(curCommonPlot=="OneY") {
      showModal(ModalRadioButtons(numVar, numVar, "okMCP", "Y 변수",  failed = FALSE))
    } else {
      numVar <- c("ALL.ALL",numVar)
      showModal(ModalCheckboxGroup(title="y 선정 대화창", modalCheckboxID="selModal", label="y 선정",
                                   choiceNames=numVar, choiceValues=numVar,
                                   modalOKButtonID="okMCP", selected="ALL.ALL"))
    }

  })
  
  observeEvent(input$MCP_x, {
    numVar <- rownames(orderVFcluster(dfReportCommon))
    curAes <<- "x"
    if(curCommonPlot=="OneX") {
      showModal(ModalRadioButtons(numVar, numVar, "okMCP", "x 변수",  failed = FALSE))
    } else {
      numVar <- c("ALL.ALL",numVar)
      showModal(ModalCheckboxGroup(title="X 선정 대화창", modalCheckboxID="selModal", label="X 선정",
                                   choiceNames=numVar, choiceValues=numVar,
                                   modalOKButtonID="okMCP", selected="ALL.ALL"))
      
    }


  })
  
  observeEvent(input$MCP_color, {
    var <- unique(colnames(dfReportCommon))
    curAes <<- "color"
    showModal(ModalRadioButtons(var, var, "okMCP", "color 변수", failed = FALSE))
  })
  
  observeEvent(input$MCP_size, {
    var <- selectVarWithGivenLevels(df=dfReportCommon, minNoLevels=1, maxNoLevels=7) 
    strExplain <- "수준이 2이상 6 이하인 변수만 선택됬습니다."
    curAes <<- "size"
    showModal(ModalRadioButtons(var, var, "okMCP", "size 변수",  strExplain, failed = FALSE))

  })
  
  observeEvent(input$MCP_shape, {
    var <- selectVarWithGivenLevels(df=dfReportCommon, minNoLevels=1, maxNoLevels=7) 
    strExplain <- "수준이 2이상 6 이하인 변수만 선택됬습니다."
    curAes <<- "shape"
    showModal(ModalRadioButtons(var, var, "okMCP", "shape 변수", failed = FALSE))
  })
  
  observeEvent(input$MCP_fill, {
    var <- selectVarWithGivenLevels(df=dfReportCommon, minNoLevels=1, maxNoLevels=7) 
    strExplain <- "수준이 2이상 7 이하인 변수만 선택됬습니다."
    curAes <<- "fill"
    showModal(ModalRadioButtons(var, var, "okMCP", "fill 변수", failed = FALSE))
  })
  
  observeEvent(input$MCP_tooltip, {
    var <- unique(colnames(dfReportCommon))
    var <- c("tooltip.DEFAULT", var)
    curAes <<- "tooltip"
    showModal(ModalRadioButtons(var, var, "okMCP", "toolip 변수", failed = FALSE))
  })
  
  observeEvent(input$MCP_data_id, {
    var <- unique(colnames(dfReportCommon))
    curAes <<- "data_id"
    showModal(ModalRadioButtons(var, var, "okMCP", "data_id 변수", failed = FALSE))
  })
  
  observeEvent(input$MCP_fitOption, {
    choiceNames <- c("NoFit", "Fit1", "Fit2")
    choiceValues <- c("NoFit", "Fit1", "Fit2")
    curAes <<- "fitOption"
    showModal(ModalRadioButtons(choiceNames, choiceValues, "okMCP", "fitOption 변수", failed = FALSE))
  })
  
  observeEvent(input$okMCP, {
    aesList[[curAes]] <<- input$selModal  # aesList[["x"]] <<- "Mn"
    if(aesList[[curAes]]=="ALL.ALL" ) {
      aesList[[curAes]] <<- rownames(orderVFcluster(dfReportCommon))
    }
    if(aesList[[curAes]]=="tooltip.DEFAULT" ) {
      aesList[[curAes]] <<- NULL
    }
    removeModal()
    switch(triggerMCP,
           # module = {
           #   switch( curAes,
           #     x = {
           #       graphOption[["xAxisTitle"]][1]<<- attr(curSampleExplore[,aesList[["x"]][1]], "label")
           #       # graphOption[["xAxisTitle"]][1]<<- aesList[["x"]][1]
           #       if(curTabExplore %in% c("scatter1")) {
           #         graphOption[["minX"]][1] <<- min(curSampleExplore[,aesList[["x"]][1]], na.rm=TRUE)
           #         graphOption[["maxX"]][1] <<- max(curSampleExplore[,aesList[["x"]][1]], na.rm=TRUE)
           #       }
           #     },
           #     y = {
           #       graphOption[["yAxisTitle"]][1]<<- attr(curSampleExplore[,aesList[["y"]][1]], "label")
           #     # graphOption[["yAxisTitle"]][1]<<- aesList[["y"]][1]
           #       graphOption[["minY"]][1] <<- min(curSampleExplore[,aesList[["y"]][1]], na.rm=TRUE)
           #       graphOption[["maxY"]][1] <<- max(curSampleExplore[,aesList[["y"]][1]], na.rm=TRUE)
           #     },
           #     {}
           #   )
           # },
           commonPlot = {
             showModal(ModalCommonPlot())
           },
           commonPlot_Violin = {
             showModal(ModalCommonPlot())
             hideButton=c("MCP_x","MCP_color", "MCP_size", "MCP_shape", "MCP_tooltip", "MCP_data_id")
             for(i in seq_along(hideButton)) {
               hide(hideButton[i])
             }
           },
           commonPlot_Histogram = {
             showModal(ModalCommonPlot())
             hideButton=c("MCP_y","MCP_color", "MCP_size", "MCP_shape", "MCP_tooltip", "MCP_data_id",
                          "MCP_fitOption")
             for(i in seq_along(hideButton)) {
               hide(hideButton[i])
             }
           },
           modelResult = {
             showModal(ModalModeling())
           },
           {alert("triggerMCP가 비었습니다.")}
    )



    # switch(curCommonPlot,
    #        OneY = {showModal(ModalCommonPlotOneY())},
    #        {showModal(ModalCommonPlot())}
    #        
    #        )
    
  })
  
  observeEvent(input$okModalCommonPlot, {
    withProgress(message="Common Plot Report Progress", value=0, {
      incProgress(0.2)
      # params <- list(df=dfReportCommon, aesList=aesList)
      outputFileName <- paste0("commonPlotReport", fromReportCommon, "_","general", ".html")
      switch(curCommonPlot,
             OneX = {
               selVar <- aesList[["x"]] 
               paramsRmd <- list(df=dfReportCommon, aesList=aesList)
             },
             OneY = {
               selVar <- aesList[["y"]] 
               paramsRmd <- list(df=dfReportCommon, aesList=aesList)
             },
             Violin = {
               selVar <- paste0(aesList[["spare1"]],"-",aesList[["x"]]) 
               aesList[["color"]] <- "clusterLassoSel"
               aesList[["y"]] <<- rownames(orderVFcluster(dfReportCommon))
               paramsRmd <- list(df=dfReportCommon, aesList=aesList, orderedVF=orderVFcluster(dfReportCommon))
               
             },
             Histogram = {
               selVar <- aesList[["y"]] 
               paramsRmd <- list(df=dfReportCommon, aesList=aesList)
             },
             {}
             )
      outputFileFinalName <- paste0("탐색 그래프 리포트", fromReportCommon, "_",chosenDFSourceFile,
                                    fileNameSuffix, selVar,"-",aesList[["color"]], "-",aesList[["data_id"]], 
                                    "-",aesList[["fitOption"]],".html")
      options(warn=-1)
      rmarkdown::render(pathFileRmdCommonPlot, output_file = outputFileName,
                        output_dir = pathHTMLReport,
                        params = paramsRmd,
                        envir = new.env(parent = globalenv()), encoding="UTF-8")
      file.rename(paste0(pathHTMLReport,"/",outputFileName), paste0(pathHTMLReport,"/",outputFileFinalName))
      incProgress(0.8)

    }) #withProgress(message="리포트 작성중", value=0, {
    
    strAlert <- paste0(pathHTMLReport,"에 ", outputFileFinalName,"이 저장되었습니다.")
    alert(strAlert)

    removeModal()
  })
  
}