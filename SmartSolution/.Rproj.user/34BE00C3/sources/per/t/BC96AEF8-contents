# sourcingCat <- "RExample"
# sourcingCat <- "Poongjeon"
# sourcingCat <- "Seah"
# sourcingCat <- "POSCO"
sourcingCat <- "SmartShiny"



sourcingMainUI <- function() {
  tabsetPanel( type="tabs",
               
    tabPanel("SourcingSub1",
      fluidPage(
        fluidRow(
          column(2, actionButton("renderReportSourcing", "리포트") ),
          includeCSS("Base/www/html/globalModal.css"),
          column(2, actionButton("renderReportCommonPlot", "탐색 리포트") ),
          # column(2, actionButton("renderReportCommonSource", "탐색 리포트") ),
          column(6, tags$h4(":::::::") ),
          column(2, actionButton("treatVar", "변수 전처리") )
          
          
        ),
        tags$hr(),
        fluidRow(
          column(3,
                 switch(sourcingCat,
                        SmartShiny = {radioButtons("source", "원천 데이타",
                                             c("empty",
                                               "mtcars"="mtcars"
                                               # "범용"="EXCEL", "clipboard"
                                             ))}    
                 )
          ),
          column(9,
                 verbatimTextOutput("strDFsource"))
        )
      )

    )
  )
  

}

sourcingMain <- function(input, output, session) {
  # 맞춤 리포트
  observeEvent(input$renderReportSourcing, {
    # showModal(ModalCheckboxGroup(outputFileNamesSourcingReport, outputFileNamesSourcingReport,
    #                              "okModalReportSourcing"))
    showModal(ModalCheckboxGroup(title="리포트 선정 대화창", modalCheckboxID="ModalCheckboxGroup", label="리포트 선정",
                                 choiceNames=outputFileFinalNamesSourcingReport, choiceValues=outputFileNamesSourcingReport,
                                 modalOKButtonID="okModalReportSourcing"))
  })
  
  observeEvent(input$okModalReportSourcing, {
    DFSourceRmd <- DFSource %>% select(-c(sampleCode, bHOT, clusterGr))
    params <- list(DFSource=DFSourceRmd, pathHTMLReport=pathHTMLReport)
    renderReportCheckboxGroup(input, output, session, params, outputFileNamesSourcingReport,outputFileFinalNamesSourcingReport, 
                         pathFileRmdSourcingReport, pathHTMLReport)
  })
  
  # 범용 리포트
  observeEvent(input$renderReportCommonPlot, {
    dfReportCommon <<- DFSource
    fromReportCommon <<- "_source"
    showModal(ModalActionButtonsReportCommon())
  })
  

  observeEvent(input$renderReportCommonPlotScatterOneY, {
    pathFileRmdCommonPlot <<- "Base/Rmd/commonPlotReportScatterOneY.Rmd"
    curCommonPlot <<- "OneY"
    fileNameSuffix <<- "_Scatter_OneY_"
    aesList[["y"]] <<- NA
    triggerMCP <<- "commonPlot"
    showModal(ModalCommonPlot())
  })
  
  observeEvent(input$renderReportCommonPlotScatterOneX, {
    pathFileRmdCommonPlot <<- "Base/Rmd/commonPlotReportScatterOneX.Rmd"
    curCommonPlot <<- "OneX"
    fileNameSuffix <<- "_Scatter_OneX_"
    aesList[["x"]] <<- NA
    triggerMCP <<- "commonPlot"
    showModal(ModalCommonPlot())
  })
  
  observeEvent(input$renderReportCommonPlotViolin, {
    pathFileRmdCommonPlot <<- "Base/Rmd/commonPlotReportViolin.Rmd"
    curCommonPlot <<- "Violin"
    fileNameSuffix <<- "_Violin_"
    triggerMCP <<- "commonPlot_Violin"
    showModal(ModalCommonPlot())
    hideButton=c("MCP_x","MCP_color", "MCP_size", "MCP_shape", "MCP_tooltip", "MCP_data_id")
    for(i in seq_along(hideButton)) {
      hide(hideButton[i])
    }
  })
  
  
  observeEvent(input$renderReportCommonPlotHistogram, {
    pathFileRmdCommonPlot <<- "Base/Rmd/commonPlotReportHistogram.Rmd"
    curCommonPlot <<- "Histogram"
    fileNameSuffix <<- "_Histogram_"
    aesList[["y"]] <<- NA
    triggerMCP <<- "commonPlot_Histogram"
    showModal(ModalCommonPlot())
    hideButton=c("MCP_y","MCP_color", "MCP_size", "MCP_shape", "MCP_tooltip", "MCP_data_id",
                 "MCP_bFit")
    for(i in seq_along(hideButton)) {
      hide(hideButton[i])
    }
  })
  
  
  observe({
    treatModalCommonPlot(input, output, session)
  })
  
  observeEvent(input$renderReportCommonDescriptive, {
    pathFileRmdCommonDescriptive <<- "Base/Rmd/commonDescriptiveReport.Rmd"
    showModal(ModalCommonDescriptive())
  })
  
  observe({
    treatModalCommonDescriptive(input, output, session)
  })

  #변수 처리
  observeEvent(input$treatVar, {
    showModal(ModalTreatVar())
  })
  
  observe({
    treatModalTreatVar(input, output, session)
  })
  
  output$strDFsource <- renderPrint({
    theme_update(axis.title=element_text(size=40))
    theme_update(axis.text=element_text(size=30))
    update_geom_defaults("point", list(size = 8))
    # theme_update(text=element_text(size=30))
    guides(color = guide_legend(override.aes = list(size = 8)))
    chosenDFSourceFile <<- ""
    hide("renderReportSourcing")
    hide("treatVar")
    # hide("fileDomain")
    hide("renderReportSampling")
    show("renderReportCommonSample")
    # hide("domainFromSource")
    # hide("initCurSampleExplore")
    show("areaTreat")
    hide("remainVar")
    hide("calcMeanDesign")
    # hide("renderReportCommonSource") 
    

    switch(input$source,
           atlas51sz = {
             source("sourcing/atlas51sz/loadSource.R", encoding="UTF-8")
             loadSource()
             showTab(inputId="SmartReportMain", target="Sampling")
             showTab(inputId="SmartReportMain", target="Explore")
             showTab(inputId="SmartReportMain", target="ExploreTable")
             hideTab(inputId="SmartReportMain", target="Modeling")
             hideTab(inputId="SmartReportMain", target="Predict")
             hideTab(inputId="SmartReportMain", target="Optimize")
           },
           mtcars = {
             source("sourcing/mtcars/loadSource.R", encoding="UTF-8")
             loadSource()
             showTab(inputId="SmartReportMain", target="Sampling")
             showTab(inputId="SmartReportMain", target="Explore")
             showTab(inputId="SmartReportMain", target="ExploreTable")
             hideTab(inputId="SmartReportMain", target="Modeling")
             hideTab(inputId="SmartReportMain", target="Predict")
             hideTab(inputId="SmartReportMain", target="Optimize")
           },
           diamonds = {
             source("sourcing/diamonds/loadSource.R", encoding="UTF-8")
             loadSource()
           },
           EXCEL = {
             show("treatVar")
             show("renderReportCommonSource")
             source("sourcing/EXCEL/loadSource.R", encoding="UTF-8")
             loadSource()
            

           },
           clipboard = {
               DFSource <<- read.delim("clipboard", stringsAsFactors = T) 
               # 빈 InsertReqInputUI 함수 정의
               source("sourcing/clipboard/function/InsertReqInputUI.R", encoding="UTF-8")
           },
           DEVELOPER = {
               source(file=file.choose(), encoding="UTF-8")
               df <- myCode()
               DFSource <<- as.data.frame(df)
               # 빈 InsertReqInputUI 함수 정의
               source("sourcing/DEVELOPER/function/InsertReqInputUI.R", encoding="UTF-8")
           },
           empty = {
               return()
           },
           {}

    )
 #     browser()
 
    func1 <- function(x) {
      if(is.na(x)) {"Normal"} 
      else {"Hot"}
    }   
    
    switch(input$source,
           erae2nd = {
             bHOT <- vapply(DFSource[,"specimenNo"], func1, FUN.VALUE=character(1))
           },
           erae3rd = {
             bHOT <- vapply(DFSource[,"specimenNo"], func1, FUN.VALUE=character(1))
           },
           {bHOT <- rep("Normal", NROW(DFSource))}
    )
    

    clusterGr <- rep("1", NROW(DFSource))
    sampleCode <- rep("remains", NROW(DFSource))
    rowNoSource <- row.names(DFSource)
    attr(bHOT, "label") <- "bHOT" ; 
    attr(clusterGr, "label") <- "clusterGr" ; 
    attr(sampleCode, "label") <- "sampleCode" ; 
    attr(rowNoSource, "label") <- "rowNoSource" ; 

    DFSource <<- cbind( DFSource,sampleCode, bHOT, clusterGr, rowNoSource )

 
    DFSource <<- as.data.frame(DFSource)
    
    
    reactDFSource(DFSource)
    curSampleExplore <<- DFSource
    curDesignDF <<- DFSource[1,]
    curOptimizeDF <<- DFSource[1,]
      
      # browser()
      # switch(AnalMethod,
      #        Explore = {
      #            IDSourceExplore <<- sourceTempo
      #            DFSourceExplore  <<- DFSource
      # #           IDSampleListExplore <<- IDSampleList
      #            curSampleExplore <<- DFSourceExplore
      #            reactCurSampleExplore(curSampleExplore) 
      #            # numeric variable 만 추출
      #            varNameVec <- colnames(curSampleExplore)
      #            func1 <- function(x) {
      #                is.numeric(curSampleExplore[,x])
      #            }
      #            booleanVec <- vapply(varNameVec, func1, FUN.VALUE=logical(1))
      #            # catVar <- varNameVec[!booleanVec]
      #            numVarExplore <<-  varNameVec[booleanVec]
      #            reactIDSourceExplore(IDSourceExplore)
      #            # 
      #            # if (sourceTempo == "DEVELOPER") {
      #            # 
      #            #     
      #            # }
      #            
      #            # Predict용 
      #            IDSourcePredict <<- sourceTempo
      #            reactIDSourcePredict(IDSourcePredict)
      #            DFSourcePredict  <<- DFSource
      #            
      #            # NewModel용
      #            IDSourceNewModel <<- sourceTempo
      #            reactIDSourceNewModel(IDSourceNewModel)
      #            DFSourceNewModel  <<- DFSource
      #            curSampleNewModel <<- DFSourceNewModel
      #        }
      # 
      # )
      

      str(DFSource)

  })   
    

}