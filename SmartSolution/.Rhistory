kk <- data.frame(tt, validMax=validMax, validMin=validMin)
kk
DT::datatable(tt)
tt <- data.frame(tt, validMax=validMax, validMin=validMin)
# colnames(tt) <- c("min", "mean", "max", "sd")
DT::datatable(tt)
runApp('SmartReportMain.R')
runApp('SmartReportMain.R')
library(shiny); runApp('SmartReportMain.R')
library(shiny); runApp('SmartReportMain.R')
library(shiny); runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
kkk <- data(mtcars)
kkk <- mtcars
View(mtcars)
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
library(shiny); runApp('C:/R/SmartReportErae/SmartReport/SmartReportMain.R')
runApp('SmartSolutionMain.R')
library(shiny); runApp('SmartSolutionMain.R')
library(shiny); runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
View(DFSource)
View(DFSource)
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
View(curDesignDF)
runApp('SmartSolutionMain.R')
View(curDesignDF)
runApp('SmartSolutionMain.R')
pathModel <<- "../Model/mtcars"
load(file=paste(pathModel,  "/모델.Rdata", sep=""))
dfModelNest <<- dfModelNest
curSelModel <<- dfModelNest[["model"]][[1]]
# df <- dfModelNest
# df <- unnest(df, data)
df <- dfModelNest[["data"]][[1]]
df <- df %>% mutate(predVal=0)
df <- as.data.frame(df)
attr(df[,"bHOT"], "label") <- "bHOT" ;
attr(df[,"sampleCode"], "label") <- "sampleCode" ;
attr(df[,"predVal"], "label") <- "predYS" ;
numVarConst <- extractNumVarNameAndConst(df)
decimalVec <- vapply(numVarConst, renderDigitVector,  FUN.VALUE=numeric(1), df)
decimalVec <- as.vector(decimalVec)
for(x in numVarConst) {
# numVarConst <- "thick"
attr(df[,x], "max") <- max(df[,x], na.rm=TRUE)
attr(df[,x], "mean") <- mean(df[,x], na.rm=TRUE)
attr(df[,x], "min") <- min(df[,x], na.rm=TRUE)
attr(df[,x], "digit") <- decimalVec[which(numVarConst==x)]
}
# attr(df[,"YS"][["YS"]], "label") <- "항복강도[MPa]"  ### tibble에서 사용
# attr(df[,"thick"], "label") <- "두께[mm]" ; attr(df[,"thick"], "digit") <- 2
# attr(df[,"width"], "label") <- "폭[mm]" ;
# attr(df[,"C"], "label") <- "C[%]" ;
# attr(df[,"Si"], "label") <- "Si[%]" ;
# attr(df[,"Mn"], "label") <- "Mn[%]" ;
# attr(df[,"YS"], "label") <- "측정 항복강도[MPa]";
# attr(df[,"TS"], "label") <- "측정 인장강도[MPa]";
# attr(df[,"Al"], "label") <- "Al[%]"; attr(df[,"Al"], "digit") <- 3
# attr(df[,"predVal"], "label") <- "예측 항복강도[MPa]"; attr(df[,"predVal"], "digit") <- 1
df <- sticky_all(df)
DFSource <<- df
selModel <<- dfModelNest[["model"]][[1]]
chosenDFSourceFile <<- "mtcarsModel"
# 이하는 리포트 생성용
############## 전체 관련 고유 정보 ################
pathHTMLReport <<- "../USER/mtcarsModel/output"
############## Sourcing 관련 고유 정보 ################
pathFileRmdSourcingReport <<- c("sourcing/mtcarsModel/Rmd/SourcingReport1.Rmd",
"sourcing/mtcarsModel/Rmd/SourcingReport2.Rmd"
)
outputFileNamesSourcingReport <<- c("SourcingReport1.html",   ### 한글명은 안됨, ggplot 포함시 pandoc에서 에러 발생 ###
"SourcingReport2.html")
outputFileFinalNamesSourcingReport <<- c("mtcars 리포트1.html",
"mtcars 리포트2.html")
############## Sampling 관련 고유 정보 ################
pathFileRmdSamplingReport <<- c("sourcing/mtcarsModel/Rmd/SamplingReport1.Rmd",
"sourcing/mtcarsModel/Rmd/SamplingReport2.Rmd",
"sourcing/mtcarsModel/Rmd/SamplingReportTable.Rmd"
)
outputFileNamesSamplingReport <<- c("SamplingReport1.html",
"SamplingReport2.html",
"SamplingReportTable.html")
DomainTable1Names <<- c("mpg","cyl","disp","hp","wt")
DomainTable1NamesLabel <<- c("Miles/G","No Cylinder","배기량","마력","무게")
DomainTable2Names <<- NULL
DomainTable2NamesLabel <<- NULL
DomainTable3Names <<- NULL
DomainTable3NamesLabel <<- NULL
# chemCompName <- c("C","Si","Mn","P","S", "Cu", "Ni", "Cr", "Mo", "V", "Nb","Ti", "SolAl", "B",  "N2", "Ca")
# chemCompNameLabel <- c("C","Si","Mn","P","S", "Cu", "Ni", "Cr", "Mo", "V", "Nb", "Ti","SolAl", "B(ppm)", "N2(ppm)",  "Ca(ppm)")
pathNameFileDomain <<- "../USER/mtcars/Domain"
pathNameFileDesign <<- "../USER/mtcars/Design"
pathNameFileNewModel <<- "../Model/mtcars"
#
#     numVarExploreSamplingHard <<- "CoilT"
#
############## dfDomainCat 계산 ################
catVarWithoutModal <<- c("am", "vs")  # Modal을 이용하지 않고 Category를 선택하는 변수
catVarWithModal <<- c("gear", "carb")  # Modal을 이용하여 Category를 선택하는 변수
catVarNameExplore <- c(catVarWithoutModal, catVarWithModal)
dfDomainCatExplore <- list("am", "vs", "gear", "carb" )
names(dfDomainCatExplore) <- catVarNameExplore
for(i in 1:NROW(catVarNameExplore)) {
if(is.factor(DFSource[,catVarNameExplore[i]][[1]])) {
dfDomainCatExplore[[catVarNameExplore[i]]] <-
attr(DFSource[,catVarNameExplore[i]][[1]], "levels")
} else {
dfDomainCatExplore[[catVarNameExplore[i]]] <-
as.character(unique(DFSource[,catVarNameExplore[i]]))
}
}
selCatDomainExplore <<- dfDomainCatExplore
############## Modeling 관련 고유 정보 ################
############## Modeling 관련 고유 정보 ################
############## Modeling 관련 고유 정보 ################
pathModel <<- "../Model/mtcars"
############## Predict 관련 고유 정보 ################
############## Predict 관련 고유 정보 ################
############## Predict 관련 고유 정보 ################
pathFileRmdPredictReport <<- c("sourcing/tensile/Rmd/weldsSeah.Rmd",
"sourcing/tensile/Rmd/SamplingReport2.Rmd",
"sourcing/tensile/Rmd/SamplingReportTable.Rmd"
)
outputFileNamesPredictReport <<- c("tensile.html")   ### 한글명은 안됨, ggplot 포함시 pandoc에서 에러 발생 ###
# "commonDescriptiveReport.html")
outputFileFinalNamesPredictReport <<- c("인장 예측(Predict).html")
# "범용 기술통계.html")
# DomainTable1Names <<- NULL
DesignTable1Names <<- c("wt","hp")
DesignTable1NamesLabel <<- c("무게","마력")
DesignTable2Names <<- NULL
DesignTable2NamesLabel <<- NULL
DesignTable3Names <<- NULL
DesignTable3NamesLabel <<- NULL
pathNameFileDesign <<- "../USER/mtcarsModel/Design"
pathNameFileDomain <<- "../USER/mtcarsModel/Domain"
pathNameFileNewModel <<- "../Model/mtcars"
dateVarNames <<- NULL
# dateVarNames <<- c("date")
############## dfDesignCat 계산 ################
catVarWithoutModalPredict <<- c("am", "gear")
catVarWithModalPredict <<- NULL
# catVarWithoutModal <<- c("factory")  or NULL # Modal을 이용하지 않고 Category를 선택하는 변수
# catVarWithModal <<- c("material") or NULL # Modal을 이용하여 Category를 선택하는 변수
catVarNamePredict <- c(catVarWithoutModalPredict, catVarWithModalPredict)
dfDesignCatPredict <- list("am", "gear")
names(dfDesignCatPredict) <- catVarNamePredict
for(i in seq_along(catVarNamePredict)) {
if(is.factor(DFSource[,catVarNamePredict[i]][[1]])) {
dfDesignCatPredict[[catVarNamePredict[i]]] <-
attr(DFSource[,catVarNamePredict[i]][[1]], "levels")
} else {
dfDesignCatPredict[[catVarNamePredict[i]]] <-
as.character(unique(as.data.frame(DFSource)[,catVarNamePredict[1]]))
}
}
for(x in catVarWithModalPredict) {
strVec <- as.character(unique(as.data.frame(DFSource)[,x]))
strVec <- sort(strVec)
}
selCatDesignPredict <<- dfDesignCatPredict
catVarWithoutModal
catVarWithoutModalPredict
as.character(selCatDesignPredict[[catVarWithoutModalPredict[1]]])
as.character(selCatDesignPredict[[catVarWithoutModalPredict[2]]])
seq_along(catVarWithoutModalPredict)
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
View(curDesignDF)
View(selCatDomainExplore)
View(selCatDesignPredict)
library(shiny); runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
View(updateCatVarOptimize)
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
nput[["selCatPredictFewLevel1"]]=="initPred1"
input[["selCatPredictFewLevel1"]]=="initPred1"
inVarName
input[[inVarName]]
input[["selCatPredictFewLevel1"]]
input[["selCatPredictFewLevel2"]]
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
library(shiny); runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
View(DFSource)
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
# install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='ai4ir', token='852555176774A01333180DF5F997AAD1',
secret='w1UW5ALljcOuTsXiTAgvYTRcM9/YsIeY6oGsin+q')
rsconnect::deployApp(appFiles=c("SmartSolutionMain.R", "..\\Model", "..\\SourceData", "..\\User", "Base", "main","sourcing"),
appPrimaryDoc="SmartSolutionMain.R")
# install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='ai4ir', token='852555176774A01333180DF5F997AAD1',
secret='w1UW5ALljcOuTsXiTAgvYTRcM9/YsIeY6oGsin+q')
rsconnect::deployApp(appFiles=c("SmartSolutionMain.R", "..\\Model", "..\\SourceData", "..\\User", "Base", "main","sourcing"),
appPrimaryDoc="SmartSolutionMain.R")
if(!require(pryr)) install.packages("pryr")
if(!require(DT)) install.packages("DT")
if(!require(Rttf2pt1)) install.packages("Rttf2pt1")
if(!require(checkmate)) install.packages("checkmate")
if(!require(extrafont)) install.packages("extrafont")
if(!require(extrafontdb)) install.packages("extrafontdb")
if(!require(gridExtra)) install.packages("gridExtra")
if(!require(hrbrthemes)) install.packages("hrbrthemes")
if(!require(magick)) install.packages("magick")
if(!require(pander)) install.packages("pander")
if(!require(pryr)) install.packages("pryr")
if(!require(rapportools)) install.packages("rapportools")
library(shiny); runApp('SmartSolutionMain.R')
runApp('SmartSolutionMain.R')
library(shiny); runApp('SmartSolutionMain.R')
# install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='ai4ir', token='852555176774A01333180DF5F997AAD1',
secret='w1UW5ALljcOuTsXiTAgvYTRcM9/YsIeY6oGsin+q')
rsconnect::deployApp(appFiles=c("SmartSolutionMain.R", "..\\Model", "..\\SourceData", "..\\User", "Base", "main","sourcing"),
appPrimaryDoc="SmartSolutionMain.R")
# install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='ai4ir', token='852555176774A01333180DF5F997AAD1',
secret='w1UW5ALljcOuTsXiTAgvYTRcM9/YsIeY6oGsin+q')
rsconnect::deployApp(appFiles=c("SmartSolutionMain.R", "..\\Model", "..\\SourceData", "..\\User", "Base", "main","sourcing"),
appPrimaryDoc="SmartSolutionMain.R")
if(!require(summarytools)) install.packages("summarytools")
if(!require(viridis)) install.packages("viridis")
runApp('SmartSolutionMain.R')
# install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='ai4ir', token='852555176774A01333180DF5F997AAD1',
secret='w1UW5ALljcOuTsXiTAgvYTRcM9/YsIeY6oGsin+q')
rsconnect::deployApp(appFiles=c("SmartSolutionMain.R", "..\\Model", "..\\SourceData", "..\\User", "Base", "main","sourcing"),
appPrimaryDoc="SmartSolutionMain.R")
# install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='ai4ir', token='852555176774A01333180DF5F997AAD1',
secret='w1UW5ALljcOuTsXiTAgvYTRcM9/YsIeY6oGsin+q')
rsconnect::deployApp(appFiles=c("SmartSolutionMain.R", "..\\Model", "..\\SourceData\\mtcars", "..\\User", "Base", "main","sourcing"),
appPrimaryDoc="SmartSolutionMain.R")
# install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='ai4ir', token='852555176774A01333180DF5F997AAD1',
secret='w1UW5ALljcOuTsXiTAgvYTRcM9/YsIeY6oGsin+q')
rsconnect::deployApp(appFiles=c("SmartSolutionMain.R", "..\\Model", "..\\SourceData\\mtcars", "..\\User", "Base", "main","sourcing"),
appPrimaryDoc="SmartSolutionMain.R")
library(rsconnect)
rsconnect::setAccountInfo(name='ai4ir', token='852555176774A01333180DF5F997AAD1',
secret='w1UW5ALljcOuTsXiTAgvYTRcM9/YsIeY6oGsin+q')
rsconnect::deployApp(appFiles=c("SmartSolutionMain.R",
"sourcing\\mtcars",
"..\\Model", "..\\SourceData\\mtcars", "..\\User", "Base", "main","sourcing"),
appPrimaryDoc="SmartSolutionMain.R")
dfOrg <- diamomds
dfOrg <- diamonds
library(shiny); runApp('SmartSolutionMain.R')
dfOrg <- diamonds
View(dfOrg)
View(dfOrg)
runApp('SmartSolutionMain.R')
dfOrg <- mtcars
View(dfOrg)
runApp('SmartSolutionMain.R')
library(shiny); runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
View(DFSource)
dfOrg <- diamonds
View(dfOrg)
for(x in colnames(dfOrg)) {
attr(dfOrg[,x], "label") <- x
}
View(dfOrg)
colnames(dfOrg)
attr(dfOrg[,"clarity"], "label") <- "투명도"
str(dfOrg)
dfOrg <- as.data.frame(dfOrg)
### "label" attribute는 그래프 라벨을 위해 반드시 필요함 ###
for(x in colnames(dfOrg)) {
attr(dfOrg[,x], "label") <- x
}
attr(dfOrg[,"clarity"], "label") <- "투명도"
View(dfOrg)
runApp('SmartSolutionShiny.R')
library(rsconnect)
rsconnect::setAccountInfo(name='ai4ir', token='852555176774A01333180DF5F997AAD1',
secret='w1UW5ALljcOuTsXiTAgvYTRcM9/YsIeY6oGsin+q')
rsconnect::deployApp(appFiles=c("SmartSolutionShiny.R",
"sourcing\\mtcars",
"..\\Model", "..\\SourceData\\mtcars", "..\\User", "Base", "main","sourcing"),
appPrimaryDoc="SmartSolutionShiny.R"
)
getwd()
library(shiny); runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
library(shiny); runApp('SmartSolutionShiny.R')
projectWD <- getwd()
setwd("..")
dirPath <- paste0(getwd(),"/USER/EXCEL")
setwd(dirPath)
# Tell R to sleep until the current directory matches the expected directory
while(getwd() != normalizePath(dirPath, winslash="/")) {
Sys.sleep(0.02)
}
filePath <- file.choose()
filePath <- file.choose()
projectWD <- getwd()
setwd("..")
dirPath <- paste0(getwd(),"/SourceData/EXCEL")
setwd(dirPath)
# Tell R to sleep until the current directory matches the expected directory
while(getwd() != normalizePath(dirPath, winslash="/")) {
Sys.sleep(0.02)
}
filePath <- file.choose()
dirPath
library(shiny); runApp('SmartSolutionShiny.R')
projectWD <- getwd()
projectWD
setwd("..")
dirPath <- paste0(getwd(),"/SourceData/EXCEL")
setwd(dirPath)
# Tell R to sleep until the current directory matches the expected directory
while(getwd() != normalizePath(dirPath, winslash="/")) {
Sys.sleep(0.02)
}
filePath <- file.choose()
chosenDFSourceFileExt <<- str_split(filePath, "\\\\")[[1]][length( str_split(filePath, "\\\\")[[1]])]
chosenDFSourceFile <<- str_split(chosenDFSourceFileExt, "\\.")[[1]][1]
chosenDFSourceExt <- str_split(chosenDFSourceFileExt, "\\.")[[1]][2]
projectWD
chosenDFSourceFileExt
chosenDFSourceFile
chosenDFSourceExt
getwd()
setwd(projectWD)
getwd()
DFSource1 <- read_csv(fulePath,
sheet=1,
skip=4, col_names=FALSE)
DFSource1 <- read_csv(fulePath,
skip=4, col_names=FALSE)
DFSource1 <- read_csv(filePath,
skip=4, col_names=FALSE)
View(DFSource1)
DFSource1 <- as.data.frame(DFSource1)
labelVec <- read_csv(filePath,
range=cell_rows(2))
filePath
projectWD
projectWD <- getwd()
setwd("..")
dirPath <- paste0(getwd(),"/SourceData/EXCEL")
setwd(dirPath)
# Tell R to sleep until the current directory matches the expected directory
while(getwd() != normalizePath(dirPath, winslash="/")) {
Sys.sleep(0.02)
}
filePath <- file.choose()
chosenDFSourceFileExt <<- str_split(filePath, "\\\\")[[1]][length( str_split(filePath, "\\\\")[[1]])]
chosenDFSourceFile <<- str_split(chosenDFSourceFileExt, "\\.")[[1]][1]
chosenDFSourceExt <- str_split(chosenDFSourceFileExt, "\\.")[[1]][2]
setwd(projectWD)
chosenDFSourceFileExt
DFSource1 <- read_xlsx(filePath, sheet=1,
skip=4, col_names=FALSE)
DFSource1 <- as.data.frame(DFSource1)
labelVec <- read_xlsx(filePath,  sheet=1,
range=cell_rows(2))
xxx <- as.data.frame(labelVec)
yyy <- t(xxx)
labelVec <- attr(yyy,"dimnames")[[1]]
for(i in 1: NCOL(DFSource1)) {
str <- paste0("...",i)
attr(DFSource1[,str],"label") <- labelVec[i]
}
View(DFSource1)
colNameVec <- read_xls(filePath
sheet=1, range=cell_rows(6))
colNameVec <- read_xlsx(filePath,
sheet=1, range=cell_rows(6))
xxx <- as.data.frame(colNameVec)
yyy <- t(xxx)
colNameVec <- attr(yyy,"dimnames")[[1]]
colnames(DFSource1) <- colNameVec
colNameVec <- read_xlsx(filePath,
sheet=1, range=cell_rows(1))
xxx <- as.data.frame(colNameVec)
yyy <- t(xxx)
colNameVec <- attr(yyy,"dimnames")[[1]]
colnames(DFSource1) <- colNameVec
### valid Min, Max 행에는 보이지 않지만 enter가 포함되어야 함 ###
validMaxVec <- read_xlsx(filePath,
sheet=1, cell_rows(3), col_types="numeric")
validMaxVec
### valid Min, Max 행에는 보이지 않지만 enter가 포함되어야 함 ###
validMaxVec <- read_xlsx(filePath,
sheet=1, cell_rows(3), col_types="numeric")
validMaxVec
projectWD
projectWD <- getwd()
setwd("..")
dirPath <- paste0(getwd(),"/SourceData/EXCEL")
setwd(dirPath)
# Tell R to sleep until the current directory matches the expected directory
while(getwd() != normalizePath(dirPath, winslash="/")) {
Sys.sleep(0.02)
}
filePath <- file.choose()
chosenDFSourceFileExt <<- str_split(filePath, "\\\\")[[1]][length( str_split(filePath, "\\\\")[[1]])]
chosenDFSourceFile <<- str_split(chosenDFSourceFileExt, "\\.")[[1]][1]
chosenDFSourceExt <- str_split(chosenDFSourceFileExt, "\\.")[[1]][2]
setwd(projectWD)
DFSource1 <- read_xlsx(filePath, sheet=1,
skip=4, col_names=FALSE)
DFSource1 <- as.data.frame(DFSource1)
labelVec <- read_xlsx(filePath,  sheet=1,
range=cell_rows(2))
xxx <- as.data.frame(labelVec)
yyy <- t(xxx)
labelVec <- attr(yyy,"dimnames")[[1]]
for(i in 1: NCOL(DFSource1)) {
str <- paste0("...",i)
attr(DFSource1[,str],"label") <- labelVec[i]
}
colNameVec <- read_xlsx(filePath,
sheet=1, range=cell_rows(1))
xxx <- as.data.frame(colNameVec)
yyy <- t(xxx)
colNameVec <- attr(yyy,"dimnames")[[1]]
colnames(DFSource1) <- colNameVec
### valid Min, Max 행에는 보이지 않지만 enter가 포함되어야 함 ###
validMaxVec <- read_xlsx(filePath,
sheet=1, cell_rows(3), col_types="numeric")
### valid Min, Max 행에는 보이지 않지만 enter가 포함되어야 함 ###
validMaxVec <- read_xlsx(filePath,
sheet=1, cell_rows(3), col_types="numeric", col_names=FALSE)
validMaxVec
xxx <- as.data.frame(validMaxVec)
yyy <- t(xxx)
yyy
validMaxVec <- attr(yyy,"dimnames")[[1]]
validMaxVec
str(yyy)
xxx
xxx[2]
xxx[3]
for(i in 1: NCOL(DFSource1)) {
attr(DFSource1[,i],"validMax") <- xxx[i]
}
xxx
for(i in 1: NCOL(DFSource1)) {
attr(DFSource1[,i],"validMax") <- xxx[,i]
}
str(xxx)
for(i in 1: NCOL(DFSource1)) {
attr(DFSource1[,i],"validMax") <- xxx[1,i]
}
str(DFSource1)
validMinVec <- read_xls(filePath,
sheet=1, range=cell_rows(4), col_types="numeric", col_names=FALSE)
### valid Min, Max 행에는 보이지 않지만 enter가 포함되어야 함 ###
validMaxVec <- read_xlsx(filePath,
sheet=1, range=cell_rows(3), col_types="numeric", col_names=FALSE)
validMinVec <- read_xlsx(filePath,
sheet=1, range=cell_rows(4), col_types="numeric", col_names=FALSE)
xxx <- as.data.frame(validMinVec)
for(i in 1: NCOL(DFSource1)) {
attr(DFSource1[,i],"validMin") <- xxx[1,i]
}
str(DFSource1)
numVarConst <- extractNumVarNameAndConst(DFSource1)
decimalVec <- vapply(numVarConst, renderDigitVector,  FUN.VALUE=numeric(1), dfOrg)
decimalVec <- vapply(numVarConst, renderDigitVector,  FUN.VALUE=numeric(1), DFSource1)
decimalVec <- as.vector(decimalVec)
for(x in numVarConst) {
# numVarConst <- "thick"
attr(DFSource1[,x], "max") <- max(DFSource1[,x], na.rm=TRUE)
attr(DFSource1[,x], "mean") <- mean(DFSource1[,x], na.rm=TRUE)
attr(DFSource1[,x], "min") <- min(DFSource1[,x], na.rm=TRUE)
attr(DFSource1[,x], "digit") <- decimalVec[which(numVarConst==x)]
}
str(DFSource1)
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
View(DFSource)
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
runApp('SmartSolutionShiny.R')
